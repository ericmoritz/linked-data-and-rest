Linked Data and REST part 1
* DONE Linked Data and REST
  CLOCK: [2014-03-03 Mon 19:47]--[2014-03-03 Mon 20:00] =>  0:13
  CLOCK: [2014-03-03 Mon 18:46]--[2014-03-03 Mon 19:11] =>  0:25
  CLOCK: [2014-03-03 Mon 18:38]--[2014-03-03 Mon 18:44] =>  0:06
  CLOCK: [2014-03-03 Mon 18:04]--[2014-03-03 Mon 18:29] =>  0:25
** DONE What is this

For those who don't know me, I am Eric Moritz.  

I am the architect on the application services team.

Application services sit on the public web between our backends and user facing
applications.

Applications such as desktop web, mobile web and native mobile apps.

Because of their nature, application services have some very strict requirements.

First, we must to be able to iterate as fast as frontend developers
demand of us.

Second, because these services are used by multiple applications, 
they must evolve without disturbing other applications.

These requirements pose a challenge.

Current approaches to RESTful services do not meet these requirements.

Some research was obviously needed in order to build application services.

This talk is my journey meet the requirements of application services.

** DONE A journey through time and space

Let me take you on a journey through time and space.  

The time? sometime around 2005.  

The place, your desk. 

You're reading a blog post on RESTful services for the first time.  

You read of a grand utopia.

One service can drive many user interfaces!  

Developers can iterate quickly without disruption!

Things just work!  

You go to bed that night, finally able to REST 

knowing that there is a brave new world coming.

Fast forward to today.  

We are all building RESTful services.

We are in the brave new world. 

But this world is more dystopian than utopian. 

Servers are tightly coupled to single applications.

Developers are stuck with stiff and rigid data formats.

We try to REST, but we lose too much sleep over broken software
and we still dream of a better world.

Where did we go wrong? 

Lets travel to the time and place were REST was first made public.

** DONE In the year 2000

We travel back to the year 2000.

Roy T Fielding is publishing his dissertation on the architecture of the world wide web.

In his dissertation, he states the requirements of a web application.

** DONE Low Entry-barrier

First, there must be a low barrier to entry. 

Hypermedia was chosen as the user interface for its simplicity and generality.

In order to have a low barrier to entry, the data format must be
simple.

Frontend developers must be able to mock the hypermedia service
with static files just as easily as they can with HTML.

The data format of application services must be general enough to
drive both native apps and web sites.

** DONE Extensibility

If a service is driving both native apps and web sites, the
technology *must* be extensible.

We must be able to evolve the service without disturbing other user agents.

If the mobile app team wants feature X, adding feature X must not
break desktop web.

If we can't do that we are not meeting this requirement of an
application service.

** DONE Low time to interaction
*** DONE Slide
*** DONE Text

Because the service is driving the user interface, the time to
interaction must be low.

Research has shown that if the time to interaction is greater than
250ms the interface feels laggy.

If an application can not meet this requirement it is not a fun web
application.

250ms is the time to interaction but services must deliver payloads
much faster than that.

The application services team must monitor the latency of the network,
the backend, the application service and the time to interaction.

The application services team must place strict SLAs on the 95 and 99
percentiles of each component of the stack.

If these SLAs are violated the owner of the stack component must be
notified.

In addition, application services and clients must use HTTP caching
effectively and correctly.

HTTP caching must be as invisible to the developer as it is to a
user.

If we use caching and conditional GETs correctly, caching in
applications become simple.

Client developers will no longer need to worry about caching because
their libraries will do it for them.

When service implementors use HTTP caching correctly with conditional
GETs we can cut down on unnecessary processing and wasted bandwidth.

** DONE Internet-scale
*** DONE Slides
*** DONE Text
Finally; a web application must be Internet scale.  

Anarchic scalability means that we can share data in a distributed system.

Anarchic scalability requires using global identifiers for objects and 
property names.

If we use global identifiers for objects and property names we can
share data between the backend, application services and client
applications regardless of how large.

Independent Deployment means we can scale and deploy clients and
servers independently.

If we meet the requirement of independent deployment, frontend developers can
work with mocked data independently of service implementors.

To have Independent Deployment we must use a common language to
communicate. 

The common language of Web applications is HTML.

Web browsers and web sites can be deployed independently because they
use HTML.

However, native applications need more.

In order to drive native and web applications, application services
need to a global hypermedia based language.

** DONE Summary

These are the requirements of a web application.  They are also the
requirements of an application service.

If we want to meet these requirements, what do we have to do?

Lets examine a how a web application met these four requirements even
in the year 2000.

** DONE A true web application
*** DONE Slides
*** DONE Text    
HTML was built from the ground up to meet these four requirements.

How does HTML drive the user interface of multiple devices?

Let us become the user. 

First I want to browse stories about "Life, the Universe and
Everything".

So I tap on the life section link.

The link transforms me into a user that is now browsing the life section.

Immediately I say, "OMG Katy Perry" and tap on Katy Perry's face.

The link transforms me into a user that is now reading a story
about Katy Perry delivering a baby in someone's living room.

This is how HTML, the hypertext markup language, uses hypermedia
to drive the user interface.

** DONE Computer says no.
*** DONE Slides
*** DONE Text
Unfortunately this service can only drive HTML browsers.  

If we wanted to use this service to drive a mobile app, 
we would have to use a WebView.

The native app only sees links between HTML documents.

The native app has no knowledge of how to 
turn the sections and stories into native components.

This knowledge would have to be  hard coded into the app.

When knowledge is hardcoded it becomes tightly coupled to the
structure of the HTML.

So, what do we need?

Lets travel to the future and view source on an application
that can drive both web sites and native applications.

** DONE View Source
*** DONE Slides
*** DONE Text

Be honored, by traveling to the future, you may be the 
first person in history to see this.

In our time, we've heard legends of services like this.

Now, for the first time, we have documented proof of a future service
that can do things that seem impossible in our time.

We have a service that can drive both web sites *and* native applications.

What you see here is the raw data needed for each user state.

This raw data still has hypermedia links between the states so
a user can transition from one state to the other.

The raw data is typed with classes that the native application can use
to create native UI components

With this service we can drive desktop web, mobile web, mobile apps
and any future user agents.  

For instance, we could use this same service to build a TV app.  It
is the same interactions but a different presentation.

We could even use this service with an in dash system like Ford Sync.

Again, same interactions, just a different presentation.

We could even use this service to print a newspaper, A newspaper has
the same interaction model albeit on dead trees. 

Of course, in the future, this service does not drive such
applications

because TVs, cars and newspapers have been made obsolete by superior RESTful
services.

** DONE If these are the requirements
*** DONE Slide
*** DONE Text
Now back to our current time. 

If these are the requirements of this brave new world.

How can we make progress towards this future.

** DONE What is state?
*** DONE Slide
*** DONE Text

The first thing we need to do is use the right definition
of "state".

When developers see the word "state" they immediately think data. So
the industry assigned URLs to data and thought they were done.

The definition of state in hypermedia is the state the user is in when
using our application. Hypermedia is just a site map.

So when developers misunderstand the definition of state, 

we misunderstood the importance of hypermedia 
and we ended up just having CRUD over HTTP and not REST.

** DONE Choosing the wrong data model
*** DONE Slides
*** DONE Text
The second thing the we need is a better data model.

Clearly we need a way to express data that is independent of the
service's chosen format.

Just as before with our HTML service, when knowledge has to be hard
coded into the app, the app becomes tightly coupled to structure of
the data model.

JSON and XML are both tree based data models.  

The object relationships are based on the shape of the tree. 

This means that clients are tightly coupled to the structure of the tree.

If a service needs to add a relationship between two objects 
it may drastically reshape the tree.

If the structure of the tree drastically changes and the app is
tightly coupled to the previous structure, the app will break.

We also need a global data model.

We need a data model that uses global identifiers for objects and
terms.

We need global identifiers in order to shared data in a distributed
system such as a client and server.

** DONE What can let us REST?
*** DONE Slides
*** DONE Text

Armed with the requirements of a web application and our new found
knowledge of a service from the future.

Can we meet these requirements with existing tools?

What can let us REST? 

What can drive native and web user agents, evolve effortlessly, be
responsive, and function at Internet scale?

Let us examine different approaches and assign gold stars to the
requirements that are met.  If we get all four gold stars, we have found
our solution.

** DONE Can JSON let us REST?
*** DONE Slides
*** DONE Text
Can JSON let us REST?

Can it drive both native and web user agents?

JSON has no native ability to control any device, so nope.

Can the service evolve? 

It can evolve in a limited way. We can add fields easily to the
objects but because it is tree based, we can't easily change
relationships between objects.

Is the UI responsive?  

Sure, but this is the participation award. HTTP gives us caching for
free. If we can download the objects in a single request we
get this star.

Is it web scale? 

No, the field names are local to the document.

If the tree is such a problem... let us take a cue from SQL and normalize. Let's try...

** DONE Can CSV let us REST?
*** DONE Slides
*** DONE Text
CSV.

CSV obviously is not hypermedia, so no star there.

Can the service evolve? 

Yes it actually can evolve quite nicely.  

We can add fields to the right without disrupting existing clients.

We can even add new relationships between objects without disrupting
existing clients. 

Gold star for extensibility.

Is the UI responsive?  

No, because there are two different files.

We have to make two HTTP requests to fetch them.

This is additional network latency.

Is it web scale? 

Nope.  The field names are local.  

They're even local to the files.

The author id is called "id" in the author table but it is called
"author_id" in the story table.

Even within these two files there are two names for the same concept.

So CSV is out, what else...

** DONE Can XML let us REST?
*** DONE Slides
*** DONE Text
XML, the extensible markup language.  The savior of data exchange.

Can we drive the user interface? 

Nope, no hypermedia in plain XML

Can the service evolve?

It is called the extensible markup language after all,

but it is as extensible as JSON is.  

We can add fields as much as we want. 

However it is tree based as well, so the structure is rigid.

Is the UI responsive?

Sure, you get the participation award, good job XML.

Is it web scale? 

Finally we have a format that is web scale. 

All the tags are namespaced, so they have global identifiers.  

We can also deploy client and servers independently because of XML
schemas.

Almost there, lets try to find the last one and a half stars somewhere.

** DONE Can HTML5 let us REST?
*** DONE Slides
*** DONE Text
The solution to XML's complexity, HTML5, can we use it to finally get
some REST?

Can we drive user agents? 

Well it is a hypertext markup language. Unfortunately we can only
drive HTML agents.

Can the service evolve? 

Again, a tree based structure, half a star.

Is it web scale?  

We actually lost this star because the field names of the HTML5 data
properties are local again.

Crap, we last half a star; Lets keep the hypermedia and try one of
those microdata things:

** DONE Can RDFa+HTML5 let us REST?
*** DONE Slides
*** DONE Text

RDFa+HTML5, can this let us REST?

Can we drive multiple user agents? 

Yes! We have both raw data and hypermedia links, so gold star.

Can the service evolve? 

Yes, the data model is no longer tree based. The RDF data model is
graph based, we can freely add properties and relationships to objects
without disrupting other clients

Is the UI responsive? 

Many objects in one HTTP response, check.

Is it web scale? 

Can we share data globally?

Yes, the property names are global URIs

Can we deploy the client and server independently? 

Yes, RDF has vocabularies which can be the basis of independant
development.

We have our 4 stars, but can do use RDF without HTML5?

** DONE Can RDF let us REST?
*** DONE Slides
*** DONE Talk

If we get rid of HTML, Can we drive the UI with RDF?

We lost links but all the rest is still there. Can we put Links back
somehow?

** DONE A wild Hydra appears!
*** DONE Slides
*** DONE Text
Absolutely! Hydra is a vocabulary for RDF that lets us describe
a hypermedia driven service.

We can use Hydra to both drive HTML applications and native
applications. We win.

** DONE Not XML; please god no!
*** DONE Slides
*** DONE Text
But isn't RDF XML? 

Actually RDF is just a data model.  Saying RDF is XML is like saying
a tree is XML.

XML is just one way to serialize RDF.  So what is RDF then?

** DONE Triples?
*** DONE Slide
*** DONE Text
RDF is simply statements made about objects.  These statements are
often called triples.

They are made up of a subject, a predicate and an object just like an
English sentence.  So when I say, "Eric has a bike", "Eric" is the
subject, "has" is the predicate and "a bike" is the object.

The subject and predicate are always global URIs.  The object can
either be a URI, with establishes a relationship to another object or data such as
a string.

** DONE RDF is a graph 1
*** DONE Slide
*** DONE Text
So these statement build an RDF graph.  The RDF graph is a directed
graph that uses URI as its identifiers.

The good thing about a graph is that relationships can be added
without drastically changing the shape of the graph. 

** DONE RDF is a graph 2
*** DONE Slide
*** DONE Text
We just added a gannett:state relationship and the graph was
mostly undisturbed.

RDF also has the benefit of being normalized.  

In JSON if we had two stories with the same author, that author object
would be duplicated. This is not the case with RDF.

This will reduce payload sizes and save us money.

** DONE Can we finally get some REST?
*** DONE Slide
*** DONE Text
So with the addition of Hydra, We can drive multiple user agents with
a standard shared vocabulary.

In additon, the RDF data model is extremely simple to understand.  

It is just statements about objects. 

If we understand the web, we understand graphs.

So we have all four stars but we are just talking about a data model, not a data format.

We could use XML to serialize the graph but that requires clients to use RDF.

Is there a middle ground?

** DONE JSON-LD
*** DONE Slide
*** DONE Text
I wouldn't be asking that question if I didn't have an answers would I?

JSON-LD is a middle ground between using RDF natively and JSON idomatically.

With JSON-LD we can serialize an RDF graph, with all its wonderful properties,

or we can use JSON-LD as idomatic JSON for clients that are unaware of RDF.

This is great for retrofitting existing services without disturbing existing clients.

Using JSON-LD meets the requirement of safe evolution while adopting
Linked Data.

** DONE Linked Data
*** DONE Slides
*** DONE Text
So I have referred to Linked Data without actually defining it.

A fairly recent development in RDF is the concept of linked data.

Linked data is a set of constraints on RDF.

These benevolent constraints were made to foster sharing and documentation

While the goal is to build a large global database in the cloud; 

we can use the same ideas internally in our own services and reap the same
benefits.

We use HTTP links for terms that point to the definition of that term.

For instance, if you visit http://schema.org/Thing you will see the
definition of the class Thing.

This definition is both machine readable and human readable.

When building an RDF vocabulary, we specify it in RDF itself.

We can use this RDF graph to generate human readable documentation.

Another term I have failed to define up to now is the meaning of a
"Shared Vocabulary"; let me try to explain it.

** DONE Shared Vocabulary
*** DONE Slide
*** DONE Text
Did you know what a meme was when you first saw the word?  

Did you even know how to pronounce it?  

Did you call a me-me or a mem?

You had to google it didn't you?  

Once you googled it you learned what a meme was.

Once you learned what a meme was you could talk about memes

** DONE Shared Vocabulary 2
*** DONE Slide
*** DONE Text
You could talk on Reddit about memes without soundly like an idiot.

Not sounding like an idiot is an important thing.

Computers need to not sound like idiots too.

Computers need to use shared vocabularies

Because if computers sound like idiots, they crash.

** DONE Shared Vocabulary 3
*** DONE Slide
*** DONE Text
A shared vocabulary is a set of properties and classes that define a
problem domain.

In the previous slide we used a schema.org vocabulary.

schema.org is a collection of very general terms that make up a common
shared vocabulary.

There are a lot of public vocabularies out there.  

A site called Linked Open Vocabularies has indexed over 400 public
vocabularies.

These are vocabularies that we can use when they match our problem
domain.

Public vocabularies are extremely important.

They are important for the same reason why a common language is
important.

If we didn't have a common language, we'd live in the Tower of Babel.

Without shared vocabularies we build distributed systems of Babel,
full of confusion.

** DONE Shared Vocabulary 3
*** DONE slide
*** DONE Text
Lets build a vocabulary to describe objects in our most popular
feed.

First, we start with a public vocabulary.  We start with schema.org's
CreativeWork class.

Schema.org's CreativeWork class has everything we need to talk about
any object in the most popular feed.

All we have to do is define what is unique to our problem domain.  

We define a gannett:Asset class which has an 'ssts' property.

You'll notice that the "Right Now" feed is a hetrogenious list of
assets.

These assets can be videos, stories, photos, or some future unknown
type.

As long as all objects in the right now feed are schema:CreativeWork
instances, 

we can display it with its image and title without making any change
to the template.

This is very powerful. 

In native application this is necessary if we want a library of
generic GUI controls.

For instance a ObjectiveC developers can make a control that is a
generic list of schema:CreativeWork objects.

These list controls are future proofed by the fact that all objects in
the feed will always be schema:CreativeWork objects. 

For safety sake, if any object in the feed is not of type
schema:CreativeWork the client should ignore it just like an HTML
browser ignores unknown tags.

This is incredible, this is amazing.  This is the freaking future and
it is 10 years old. Why are we not using it now?

** DONE With Linked Data
*** DONE Slide
*** DONE Text
I hope I was successful in expressing how important Linked Data is
for building RESTful services.

Linked Data lets us communicate about our data with clarity.

We can describe the properties of our objects in certain terms.

With JSON-LD we can retrofit existing services without disturbing
existing clients.

With global graphs we have the ability to evolve services safely.

And finally with Hydra, we can describe hypermedia services in the
clear language of linked data to drive any user agent.

If I accomplished anything with this talk,

I hope that I convince you to at least retrofit your services with JSON-LD

So that you can give meaning to meaningless services

** DONE We can finally get some REST
and we can finally get *some* REST. Thank you.

